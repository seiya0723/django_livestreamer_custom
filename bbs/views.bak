from django.shortcuts import render,redirect
from django.views import View

from imutils.video import VideoStream
from django.http import StreamingHttpResponse

import os 
import cv2
import time
import datetime
import threading


# トップページ
class IndexView(View):
    def get(self, request, *args, **kwargs):
        global VS

        context = {}

        if VS is None:
            context["is_active"] = False
        else:
            context["is_active"] = True

        return render(request,"bbs/index.html", context)

index   = IndexView.as_view()




# 最新のフレームが入る変数
OUTPUT_FRAME     = None

# スレッド間でのフレームの読み書きを制御するためのロック
LOCK            = threading.Lock()

# カメラ関係
VS          = None
THREAD      = None
STOP_EVENT  = None

# カメラの起動・停止を制御
class VideoControlView(View):
    def post(self, request, *args, **kwargs):

        global VS, THREAD, STOP_EVENT

        if VS is None:
            # カメラ起動
            VS = VideoStream(src=0).start()
            time.sleep(2)

            # ストリーマーをマルチスレッドで起動させる
            STOP_EVENT = threading.Event()
            THREAD = threading.Thread(target=detect_motion, args=(32,))
            THREAD.daemon = True
            THREAD.start()

        else:
            # カメラ停止
            STOP_EVENT.set()
            THREAD.join()
            VS.stop()
            VS = None

        return redirect("bbs:index")

video_control = VideoControlView.as_view()


# カメラからフレームを読み取り、動体検知処理をする
# STOPの指示があれば停止する。
def detect_motion(frameCount):
    global VS, OUTPUT_FRAME, LOCK, STOP_EVENT

    while not STOP_EVENT.is_set():

        # カメラを読み込みして、リサイズする。
        frame       = VS.read()
        frame       = imutils.resize(frame, width=400)

        with LOCK:
            # 最新のフレームをコピーする
            OUTPUT_FRAME = frame.copy()


# 最新のフレームをjpgに変換して返却している
# STOP指示があっても、この処理自体は常に動いている。
def generate():
    global OUTPUT_FRAME, LOCK

    while True:

        # 
        with LOCK:
            if OUTPUT_FRAME is None:
                continue
            (flag, encodedImage) = cv2.imencode(".jpg", OUTPUT_FRAME)
            if not flag:
                continue

        # バイナリでyieldを返す。
        yield(b'--frame\r\n' b'Content-Type: image/jpeg\r\n\r\n' + bytearray(encodedImage) + b'\r\n')


# jpgデータを配信している
class StreamView(View):
    def get(self, request, *args, **kwargs):
        return StreamingHttpResponse(generate(), content_type="multipart/x-mixed-replace; boundary=frame")

stream   = StreamView.as_view()

